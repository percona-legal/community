<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>perf on Percona Community</title><link>https://percona.community/tags/perf/</link><description>Recent content in perf on Percona Community</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© Percona Community. MySQL, InnoDB, MariaDB and MongoDB are trademarks of their respective owners.</copyright><lastBuildDate>Wed, 05 Feb 2020 16:18:14 +0000</lastBuildDate><atom:link href="https://percona.community/tags/perf/index.xml" rel="self" type="application/rss+xml"/><item><title>Finding MySQL Scaling Problems Using perf</title><link>https://percona.community/blog/2020-02-05-finding-mysql-scaling-problems-using-perf/</link><pubDate>Wed, 05 Feb 2020 16:18:14 +0000</pubDate><guid>https://percona.community/blog/2020-02-05-finding-mysql-scaling-problems-using-perf/</guid><description>The thing I wish I&amp;rsquo;d learned while still a DBA is how to use perf. Conversely after moving to a developer role, getting access to real external client workloads to get a perf recording directly is rare. To bridge this gap, I hope to encourage a bit of perf usage to help DBAs report bugs/feature requests in more detail to MySQL developers, who can then serve your needs better.
A recent client request showed how useful perf is in exposing the areas of MySQL that are otherwise well tuned, but can still be in need of coding improvements that increase throughput.</description></item></channel></rss>