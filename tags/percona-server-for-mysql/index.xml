<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Percona Server for MySQL on Percona Community</title><link>https://percona.community/tags/percona-server-for-mysql/</link><description>Recent content in Percona Server for MySQL on Percona Community</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Percona Community. MySQL, InnoDB, MariaDB and MongoDB are trademarks of their respective owners.</copyright><lastBuildDate>Thu, 23 Apr 2020 15:47:21 +0000</lastBuildDate><atom:link href="https://percona.community/tags/percona-server-for-mysql/index.xml" rel="self" type="application/rss+xml"/><item><title>Unexpected slow ALTER TABLE in MySQL 5.7</title><link>https://percona.community/blog/2020-05-23-unexpected-slow-alter-table-mysql-5-7/</link><pubDate>Thu, 23 Apr 2020 15:47:21 +0000</pubDate><guid>https://percona.community/blog/2020-05-23-unexpected-slow-alter-table-mysql-5-7/</guid><description>Usually one would expect that ALTER TABLE with ALGORITHM=COPY will be slower than the default ALGORITHM=INPLACE. In this blog post we describe the case when this is not so.
One of the reasons for such behavior is the lesser known limitation of ALTER TABLE (with default ALGORITHM=INPLACE) that avoids REDO operations. As a result, all dirty pages of the altered table/tablespace have to be flushed before the ALTER TABLE completion.</description></item><item><title>Disk of Yesteryear Compared to Today’s SSD Drives</title><link>https://percona.community/blog/2020-01-17-disk-of-yesteryear-compared-to-todays-ssd-drives/</link><pubDate>Fri, 17 Jan 2020 16:48:46 +0000</pubDate><guid>https://percona.community/blog/2020-01-17-disk-of-yesteryear-compared-to-todays-ssd-drives/</guid><description>In my [last blog post](https://www.percona.com/ community-blog/2019/08/01/how-to-build-a-percona-server-stack-on-a-raspberry-pi-3/) I showed you how to get the entire Percona “Stack&amp;quot; up and running on a Raspberry Pi. This time around, I would like to show the impact on performance between using an SSD hard disk and a standard hard disk.
Disk performance is a key factor in Percona Server for MySQL (or any RDB platform) performance on a Raspberry Pi 4.</description></item><item><title>Percona Server for MySQL 8.0 – New Data Masking Feature</title><link>https://percona.community/blog/2019-12-13-percona-server-for-mysql-8-0-new-data-masking-feature/</link><pubDate>Fri, 13 Dec 2019 10:43:14 +0000</pubDate><guid>https://percona.community/blog/2019-12-13-percona-server-for-mysql-8-0-new-data-masking-feature/</guid><description>Database administrators are responsible for maintaining the privacy and integrity of data. When the data contains confidential information, your company has a legal obligation to ensure that privacy is maintained. Even so, being able to access the information contained in that dataset, for example for testing or reporting purposes, has great value so what to do? MySQL Enterprise Edition offers data masking and de-identification, so I decided to contribute similar functionality to Percona Server for MySQL.</description></item><item><title>How to Build a Percona Server "Stack" on a Raspberry Pi 3+</title><link>https://percona.community/blog/2019-08-01-how-to-build-a-percona-server-stack-on-a-raspberry-pi-3/</link><pubDate>Thu, 01 Aug 2019 12:50:36 +0000</pubDate><guid>https://percona.community/blog/2019-08-01-how-to-build-a-percona-server-stack-on-a-raspberry-pi-3/</guid><description>The blog post How to Compile Percona Server for MySQL 5.7 in Raspberry Pi 3 by Walter Garcia, inspired me to create an updated install of Percona Server for the Raspberry Pi 3+.
This how-to post covers installing from source and being able to use Percona Server for MySQL in any of your maker projects. I have included everything you need to have a complete Percona Server, ready to store data collection for your weather station, your GPS data, or any other project you can think of that would require data collection in a database.</description></item><item><title>Deploying MySQL on Kubernetes with a Percona-based Operator</title><link>https://percona.community/blog/2018-10-11-deploying-mysql-on-kubernetes-with-a-percona-based-operator/</link><pubDate>Thu, 11 Oct 2018 17:03:04 +0000</pubDate><guid>https://percona.community/blog/2018-10-11-deploying-mysql-on-kubernetes-with-a-percona-based-operator/</guid><description>In the context of providing managed WordPress hosting services, at Presslabs we operate with lots of small to medium-sized databases, in a DB-per-service model, as we call it. The workloads are mostly reads, so we need to efficiently scale that. The MySQL® asynchronous replication model fits the bill very well, allowing us to scale horizontally from one server—with the obvious availability pitfalls—to tens of nodes. The next release of the stack is going to be open-sourced.</description></item><item><title>A Nice Feature in MariaDB 10.3: no InnoDB Buffer Pool in Core Dumps</title><link>https://percona.community/blog/2018-06-28-nice-feature-in-mariadb-103-no-innodb-buffer-pool-in-coredumps/</link><pubDate>Thu, 28 Jun 2018 12:28:58 +0000</pubDate><guid>https://percona.community/blog/2018-06-28-nice-feature-in-mariadb-103-no-innodb-buffer-pool-in-coredumps/</guid><description>MariaDB 10.3 is now generally available (10.3.7 was released GA on 2018-05-25). The article What&amp;rsquo;s New in MariaDB Server 10.3 by the MariaDB Corporation lists three key improvements in 10.3: temporal data processing, Oracle compatibility features, and purpose-built storage engines. Even if I am excited about MyRocks and curious on Spider, I am also very interested in less flashy but still very important changes that make running the database in production easier.</description></item></channel></rss>