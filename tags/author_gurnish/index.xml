<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>author_gurnish on Percona Community</title><link>https://percona.community/tags/author_gurnish/</link><description>Recent content in author_gurnish on Percona Community</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© Percona Community. MySQL, InnoDB, MariaDB and MongoDB are trademarks of their respective owners.</copyright><lastBuildDate>Wed, 07 Aug 2019 07:52:45 +0000</lastBuildDate><atom:link href="https://percona.community/tags/author_gurnish/index.xml" rel="self" type="application/rss+xml"/><item><title>MySQL 5.6/Maria 10.1 : How we got from 30k qps to 101k qps.....</title><link>https://percona.community/blog/2019-08-07-mysql-how-we-got-from-30k-qps-to-101k-qps/</link><pubDate>Wed, 07 Aug 2019 07:52:45 +0000</pubDate><guid>https://percona.community/blog/2019-08-07-mysql-how-we-got-from-30k-qps-to-101k-qps/</guid><description>Late one evening, I was staring at one of our large MySQL installations and noticed the database was hovering around 7-10 run queue length (48 cores, ~500 gigs memory, fusionIO cards). I had been scratching my head on how to get more throughput from the database. This blog records the changes I made to tune performance in order to achieve a 300% better throughput in MySQL. I tested my theories on MySQL 5.</description></item></channel></rss>