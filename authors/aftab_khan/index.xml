<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Percona Community</title><link>https://percona.community/authors/aftab_khan/</link><description>Recent content on Percona Community</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Percona Community. MySQL, InnoDB, MariaDB and MongoDB are trademarks of their respective owners.</copyright><lastBuildDate>Tue, 16 Oct 2018 15:18:36 +0000</lastBuildDate><atom:link href="https://percona.community/authors/aftab_khan/index.xml" rel="self" type="application/rss+xml"/><item><title>Export to JSON from MySQL All Ready for MongoDB</title><link>https://percona.community/blog/2018-10-16-export-to-json-from-mysql-all-ready-for-mongodb/</link><pubDate>Tue, 16 Oct 2018 15:18:36 +0000</pubDate><guid>https://percona.community/blog/2018-10-16-export-to-json-from-mysql-all-ready-for-mongodb/</guid><description>This post walks through how to export data from MySQL® into JSON format, ready to ingest into MongoDB®. Starting from MySQL 5.7+, there is native support for JSON. MySQL provides functions that actually create JSON values, so I will be using these functions in this article to export to JSON from MySQL:
JSON_OBJECT JSON_ARRAY These functions make it easy to convert MySQL data to JSON e.g.
mysql&amp;gt; SELECT json_object(&amp;#39;employee_id&amp;#39;, emp_no, &amp;#39;first_name&amp;#39;, first_name ) AS &amp;#39;JSON&amp;#39; FROM employees LIMIT 2; +------------------------------------------------+ | JSON | +------------------------------------------------+ | {&amp;#34;first_name&amp;#34;: &amp;#34;Aamer&amp;#34;, &amp;#34;employee_id&amp;#34;: 444117} | | {&amp;#34;first_name&amp;#34;: &amp;#34;Aamer&amp;#34;, &amp;#34;employee_id&amp;#34;: 409151} | +------------------------------------------------+ 2 rows in set (0.</description></item><item><title>Minimize MySQL Deadlocks with 3 Steps</title><link>https://percona.community/blog/2018-09-24-minimize-mysql-deadlocks-3-steps/</link><pubDate>Mon, 24 Sep 2018 10:49:35 +0000</pubDate><guid>https://percona.community/blog/2018-09-24-minimize-mysql-deadlocks-3-steps/</guid><description>MySQL has locking capabilities, for example table and row level locking, and such locks are needed to control data integrity in multi-user concurrency. Deadlocks—where two or more transactions are waiting for one another to give up locks before the transactions can proceed successfully—are an unwanted situation. It is a classic problem for all databases including MySQL/PostgreSQL/Oracle etc. By default, MySQL detects the deadlock condition and to break the deadlock it rolls back one of the transactions.</description></item></channel></rss>